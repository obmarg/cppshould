Do I want to have an object identity matcher?

Currently got 2 ideas for ways it could work.  Figure out which is best...

Base called Expectation
There should be static (but optional) std::func variables for success handler & 
fail handling that are called if present.  Not sure where to put them...
Thinking that most of the actual assertion will be done in operator>> or operator<<
so somewhere accesible from there certainly.
Will also need to be accesible from BeProxy

Most of the Contain(x) things will need to be factory functions rather than
actual classes to allow them to accept multiple types...  Think the naming
scheme should be ContainMatcher as the type and Contain() as the factory
function.  Ideally the factory function should probably do some screening of
the types passed in, using static_assert.

4 SHOULD_BE == 5
4 << BeProxy(ShouldInfo(...)) == 5   // BeProxy is WIP name

4 SHOULD Be(5)[.Approx(factor), .CaseInsensitive]
4 << ShouldInfo(...) << Be(5)

// Thinking this syntax is a no-go - too much work probably
range SHOULD_CONTAIN x
range << ShouldInfo(...) << Contain() << x

// Contain could be typedef'd under Include as well?
range SHOULD Contain(x)
range << ShouldInfo(...) << Contain(x)

// Thinking that contain should take a range as well as individual items?
range SHOULD_NOT Contain(x)
range << ShouldInfo(...,false) << Contain(x)

item SHOULD BeIn(range)
range << ShouldInfo(...) << BeIn(range)

// If possible BeEmpty could be some sort of const type
// that doesn't require parenthesis?
// This is effectively syntactic sugar
range SHOULD BeEmpty

// These are all effectively syntactic sugar
x SHOULD BeTrue
x SHOULD BeFalse
x SHOULD BeNull
x SHOULD BeNullPtr  // C++11 nullptr, not NULL

// This name could probably be better...
// Since generally we'd have factory functions, I'm thinking this should accept 
// a variable of the type as well as the actual type itself (through some sort
// of template magic presumably)
x SHOULD BeRelatedTo<type>()

// Some more synonyms/possible names (might want to have match vs. search)
// Also might want to allow passing in a string, but also an actual regexp object
text SHOULD BeLike(regexp)
text SHOULD Match()

// would be good to have these accept a tuple/argument list with func & args also
callable SHOULD Throw<type>(optional verification callback)

callable SHOULD Change(x)[.By, .ByAtMost, .ByAtLeast, .From, .To]

range SHOULD StartWith(range)
range SHOULD EndWith(range)

// Would be good if I could figure out a way to get Have to act on a property
// of the class. Doubt it'll happen though....
range SHOULD Have(5)[.Items, .Elements, .Others]
range SHOULD HaveAtLeast(...)
range SHOULD HaveAtMost(...)

// If these next 2 could somehow accept individual arguments & ranges, that'd be great
range SHOULD IncludeAll(...)
range SHOULD IncludeAny(...)

range SHOULD IncludeKeys(...)
range SHOULD IncludeValues(...)

// TODO: Expect(x).To( matcher() ) syntax...
// TODO: Expect(x).ToNot( matcher() ) syntax...
//       Expect(x).ToBe == xxx
//
//       I'm thinking these might work alright... just need to use the same
//       factory functions and have the To/ToNot functions accept a matcher and
//       go through the same motions as the << or >> operators

// TODO: Would be good to find a way to specify error text as well.
// TODO: Also, chaining these things together could be incredibly cool
//       Thinking that would at least need some bracketing of things
//       to override the (relatively) low precedence of logical operators
