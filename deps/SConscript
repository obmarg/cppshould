import os
import subprocess

Import( 'env', 'libs', 'depdestdir', )


def FetchDep(destPath, srcUrl):
    if not os.path.exists(destPath):
        print "Fetching {0}".format(destPath)
        outfile = open(os.path.devnull, 'w')
        subprocess.check_call(
                ['wget', srcUrl],
                stdout=outfile, stderr=outfile
                )
        filename = os.path.basename(srcUrl)
        subprocess.check_call(
                ['unzip', filename],
                stdout=outfile
                )
        outfile.close()
        os.unlink(filename)

gtestpath = 'gtest-1.6.0'
FetchDep(gtestpath, 'http://googletest.googlecode.com/files/gtest-1.6.0.zip')
gmockpath = 'gmock-1.6.0'
FetchDep(gmockpath, 'http://googlemock.googlecode.com/files/gmock-1.6.0.zip')

myenv = env.Clone()

myenv.Prepend(CPPPATH=gtestpath)
sources = [os.path.join(gtestpath, 'src', 'gtest-all.cc')]
gtestoutput = myenv.StaticLibrary('gtest', source=sources)
gtestinstall = myenv.Install(depdestdir, gtestoutput)
env.Alias('gtest', gtestinstall)

myenv.Prepend(CPPPATH=gmockpath)
sources = [os.path.join(gmockpath, 'src', 'gmock-all.cc')]
gmockoutput = myenv.StaticLibrary('gmock', source=sources)
gmockinstall = myenv.Install(depdestdir, gmockoutput)
env.Alias('gmock', gmockinstall)
